server.port=2222
spring.application.name=stream-producer
#cloud strema config
spring.cloud.stream.bindings.greetingSourceChannel.destination=greetingExchange
spring.cloud.stream.bindings.greetingSourceChannel.binder=greetingBinder
spring.cloud.stream.binders.greetingBinder.type=rabbit
spring.cloud.stream.binders.greetingBinder.environment.spring.rabbitmq.host=localhost
spring.cloud.stream.binders.greetingBinder.environment.spring.rabbitmq.port=5672
spring.cloud.stream.binders.greetingBinder.environment.spring.rabbitmq.username=guest
spring.cloud.stream.binders.greetingBinder.environment.spring.rabbitmq.password=guest

# h2 config
spring.jpa.generate-ddl=true
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

#eureka client config
eureka.client.service-url.defaultZone=http://localhost:9091/eureka
eureka.client.fetch-registry=true
eureka.instance.prefer-ip-address=true
eureka.client.register-with-eureka=true
eureka.instance.instance-id=${spring.application.name}:${random.value}

id-generator-service=id-generator-service

id-generator-service.ribbon.ReadTimeout=3000
id-generator-service.ribbon.ConnectTimeout=1000
# total count accross all the retrying among all the instances of thoirid party service
id-generator-service.ribbon.MaxAutoRetriesNextServer=4
#number of max retry per instance, once it is 0 for any instance then we skip it unitl either total retry timeout completes or total retry count completes to 0
id-generator-service.ribbon.MaxAutoRetries=2

#fake genrator -> just a demo of ribbon load balancing woitout eureka registered services
fake-generator-service.ribbon.eureka.enabled=false
fake-generator-service.ribbon.listOfServers=localhost:1000,localhost:1001

#for hystrix dashoard
management.endpoints.web.exposure.include=hystrix.stream


